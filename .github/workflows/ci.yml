name: Relia CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test-python-unix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
        os: [ubuntu-latest, macos-latest]
            
    steps:
    # Use sparse checkout to avoid problematic files
    - name: Checkout with sparse checkout
      uses: actions/checkout@v3
      with:
        # Exclude problematic workflow files during checkout
        sparse-checkout: |
          /*
          !.github/workflows/.github:*
        sparse-checkout-cone-mode: false
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run linting
      run: poetry run ruff check .
      
    - name: Run ansible-lint
      run: poetry run ansible-lint backend/ relia_cli/

    - name: Run Python tests
      run: poetry run pytest -v --ignore=.venv

  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [test-python-unix]
    if: github.event_name != 'pull_request'
    
    steps:
    # Use sparse checkout to avoid problematic files
    - name: Checkout with sparse checkout
      uses: actions/checkout@v3
      with:
        # Exclude problematic workflow files during checkout
        sparse-checkout: |
          /*
          !.github/workflows/.github:*
        sparse-checkout-cone-mode: false
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: relia:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release and Publish
    runs-on: ubuntu-latest
    needs: [test-python-unix, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    # Use sparse checkout to avoid problematic files
    - name: Checkout with sparse checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        # Exclude problematic workflow files during checkout
        sparse-checkout: |
          /*
          !.github/workflows/.github:*
        sparse-checkout-cone-mode: false
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build Python package
      run: poetry build
    
    - name: Get Changelog Entry
      id: changelog
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        CHANGELOG_ENTRY=$(awk "/## \[$VERSION\]/{flag=1;next}/## \[/{flag=0}flag" CHANGELOG.md || echo "No changelog entry found for version $VERSION")
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG_ENTRY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
        body: |
          # Release v${{ steps.get_version.outputs.VERSION }}
          
          ${{ env.CHANGELOG }}
          
          ## Installation
          
          ### CLI:
          ```bash
          pip install relia-cli
          ```
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
        skip-existing: true